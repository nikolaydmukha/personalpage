# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import protos.pilling.rpc.protos.services_pb2 as services__pb2


class ServicesStub(object):
  """Client services service 
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.GetClientServices = channel.unary_unary(
        '/Services/GetClientServices',
        request_serializer=services__pb2.ClientServicesRequest.SerializeToString,
        response_deserializer=services__pb2.ClientServicesReply.FromString,
        )


class ServicesServicer(object):
  """Client services service 
  """

  def GetClientServices(self, request, context):
    """Get client services by ID 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_ServicesServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'GetClientServices': grpc.unary_unary_rpc_method_handler(
          servicer.GetClientServices,
          request_deserializer=services__pb2.ClientServicesRequest.FromString,
          response_serializer=services__pb2.ClientServicesReply.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Services', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
